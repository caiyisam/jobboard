<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd 
		http://www.springframework.org/schema/cache
  		http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">



	<!-- bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName"> <value>${jdbc_p6spy.driverClassName}</value> 
		</property> <property name="url"> <value>${jdbc_mysql.url}</value> </property> 
		<property name="username"> <value>${jdbc_mysql.username}</value> </property> 
		<property name="password"> <value>${jdbc_mysql.password}</value> </property> 
		</bean -->
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg>
			<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<property name="driverClassName">
					<value>${jdbc_mysql.driverClassName}</value>
				</property>
				<property name="url">
					<value>${jdbc_mysql.url}</value>
				</property>
				<property name="username">
					<value>${jdbc_mysql.username}</value>
				</property>
				<property name="password">
					<value>${jdbc_mysql.password}</value>
				</property>
			</bean>
		</constructor-arg>
	</bean>

	<!-- spring mvc config -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />


	<cache:annotation-driven />
	<bean id="cacheManagerFactory"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>


	<!-- 多视图配置 <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> 
		<property name="order" value="1" /> <property name="ignoreAcceptHeader" value="true" 
		/> <property name="defaultContentType" value="application/xml;charset=utf-8" 
		/> <property name="mediaTypes"> <map> <entry key="xml" value="application/xml;charset=utf-8" 
		/> </map> </property> <property name="defaultViews"> <list> <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
		<constructor-arg> <bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
		<property name="classesToBeBound"> <list> <value>com.test.Person</value> 
		</list> </property> </bean> </constructor-arg> </bean> </list> </property> 
		</bean> -->

	<!-- freemark config -->
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">UTF-8</prop>
			</props>
		</property>

	</bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html; charset=UTF-8" />
		<property name="order" value="1" />
	</bean>


	<!-- spring mybatis config -->
	<!-- Properties文件读取配置，base的properties -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<mvc:resources mapping="/style/**" location="/style/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/scripts/**" location="/scripts/" />


	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- (Annotation方式配置services)enable component scanning (beware that this 
		does not enable mapper scanning!) -->
	<context:component-scan base-package="com.shecc.basedev" />

	<!-- enable autowire -->
	<context:annotation-config />

	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven />

	<!-- define the SqlSessionFactory, notice that configLocation is not needed 
		when you use MapperFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="baseDao" abstract="true"
		class="com.shecc.basedev.core.dao.IBatisGenericDaoImpl">
		<property name="sqlSessionTemplate" ref="sqlSession" />
	</bean>


	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy />

	<!--bean id="bizMessage" class="com.hayden.common.message.BizMessage"></bean -->

	<!-- shiro权限管理 -->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<!-- bean id="loginRealm" class="com.hayden.upc.web.realm.LoginAuthorizingRealm" 
		/ -->


	<bean id="shirocacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" />

	<bean id="esessionDao"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="shirocacheManager" />
		<!-- property name="realm" ref="loginRealm" / -->
	</bean>

	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="1800000" />
		<property name="sessionDAO" ref="esessionDao" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionIdCookie" ref="jpsession" />
	</bean>

	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="jpsession" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="JPSESSIONID" />
	</bean>


	<!-- 定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作 用户直接关闭浏览器造成的孤立会话 -->
	<bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="interval" value="900000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>


	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/main.jsp" />
		<property name="unauthorizedUrl" value="/error.jsp" />
		<!-- property name="filters"> <map> <entry key="authc"> <bean class="com.hayden.upc.filter.LoginFormAuthenticationFilter"></bean> 
			</entry> </map> </property -->
		<property name="filterChainDefinitions">
			<value>
				/images/** = anon
				/css/** = anon
				/js/** = anon
				/index.jsp = anon
				/login* = authc
				/main.jsp* = authc
				/** = authc
				//reportJsp/css/**=anon
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor"/> <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> 
		<property name="securityManager" ref="securityManager"/> </bean> -->
</beans>